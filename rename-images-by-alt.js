// rename-images-by-alt.js (CommonJS) ‚Äî –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");

const SRC_DIR = path.join(process.cwd(), "generated");
const IMG_ROOT = path.join(process.cwd(), "public", "images-temp");

if (!fs.existsSync(SRC_DIR)) throw new Error("–ù–µ—Ç –ø–∞–ø–∫–∏ generated/");
if (!fs.existsSync(IMG_ROOT)) fs.mkdirSync(IMG_ROOT, { recursive: true });

const files = fs.readdirSync(SRC_DIR).filter(f => /\.(tsx|jsx)$/.test(f));

const slugify = s =>
  String(s).trim().toLowerCase()
    .replace(/['"‚Äô¬´¬ª‚Äû‚Äù‚Äú]/g, "")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-+|-+$)/g, "") || "img";

const sha8 = buf => crypto.createHash("sha1").update(buf).digest("hex").slice(0, 8);

// –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π —Ä–∞–∑–±–æ—Ä –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ —Ç–µ–≥–µ <img ...>
const parseImgAttrs = tag => {
  const attrs = {};
  const re = /(\w+)\s*=\s*"([^"]*)"|(\w+)\s*=\s*'([^']*)'/g;
  let m; while ((m = re.exec(tag))) { const k = m[1] || m[3]; const v = m[2] || m[4] || ""; attrs[k] = v; }
  return attrs;
};

let touched = 0, renamed = 0;

for (const fname of files) {
  const compName = path.basename(fname, path.extname(fname));               // –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ = –∏–º—è —Ñ–∞–π–ª–∞
  const IMG_DIR = path.join(IMG_ROOT, compName);                             // –ü–∞–ø–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  if (!fs.existsSync(IMG_DIR)) fs.mkdirSync(IMG_DIR, { recursive: true });

  const fp = path.join(SRC_DIR, fname);
  let src = fs.readFileSync(fp, "utf-8");
  const imgTagRe = /<img\b[^>]*>/gi;
  const matches = src.match(imgTagRe) || [];
  let changed = false;

  for (const tag of matches) {
    const { src: imgSrc, alt } = parseImgAttrs(tag);
    if (!imgSrc || !imgSrc.startsWith("/images-temp/")) continue;

    const absOld = path.join(IMG_ROOT, path.basename(imgSrc));               // —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å (–∫–æ—Ä–µ–Ω—å images-temp/)
    if (!fs.existsSync(absOld)) continue;

    const buf = fs.readFileSync(absOld);
    const hash = sha8(buf);
    const ext = path.extname(absOld) || ".bin";
    const base = slugify(alt || path.basename(imgSrc, ext)) || "img";
    let newName = `${base}${ext}`;
    let absNew = path.join(IMG_DIR, newName);

    // –µ—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ñ–∞–π–ª, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥—Ä—É–≥–æ–π ‚Äî –¥–æ–±–∞–≤–∏–º —Ö—ç—à
    if (fs.existsSync(absNew) && !fs.readFileSync(absNew).equals(buf)) {
      newName = `${base}-${hash}${ext}`;
      absNew = path.join(IMG_DIR, newName);
    }

    // –ø–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–∞ –≤ –ø–æ–¥–ø–∞–ø–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ)
    fs.renameSync(absOld, absNew);

    // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –∫–æ–¥–µ
    const newSrc = `/images-temp/${compName}/${newName}`;
    const updatedTag = tag.replace(imgSrc, newSrc);
    src = src.replace(tag, updatedTag);
    changed = true; renamed++;
    console.log(`üì¶ ${compName}: ${path.basename(imgSrc)} ‚Üí ${compName}/${newName}`);
  }

  if (changed) { fs.writeFileSync(fp, src, "utf-8"); touched++; }
}

// –ø–æ–¥—á–∏—Å—Ç–∏–º ¬´–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ¬ª —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ images-temp (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å)
for (const f of fs.readdirSync(IMG_ROOT)) {
  const p = path.join(IMG_ROOT, f);
  if (fs.statSync(p).isFile()) fs.unlinkSync(p);
}

console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${touched}`);
console.log(`üñºÔ∏è  –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${renamed}`);
console.log(`üìÇ –ë–∞–∑–∞: public/images-temp/<Component>/...`);
